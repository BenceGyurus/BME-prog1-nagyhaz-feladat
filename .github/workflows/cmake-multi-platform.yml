name: CMake Multi-Platform Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Set up CMake
      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.22.0'

      # Install GCC or equivalent compiler (Linux only)
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential

      # Configure the build
      - name: Configure with CMake
        run: cmake -S . -B build

      # Build the project
      - name: Build with CMake
        run: cmake --build build --config Release

      # Package the artifact for release
      - name: Package the artifact
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            zip -j build/morse-windows.zip build/Release/morse.exe
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            zip -j build/morse-macos.zip build/morse
          else
            tar -czvf build/morse-linux.tar.gz -C build morse

      # Upload artifact for later use
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: morse-${{ matrix.os }}
          path: |
            build/morse-windows.zip
            build/morse-macos.zip
            build/morse-linux.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # Download build artifacts from all platforms
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          path: build

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Release v${{ github.run_number }}"
          body: |
            This release contains the latest builds for all platforms.
          draft: false
          prerelease: false

      # Upload release assets
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/morse-windows.zip
          asset_name: morse-windows.zip
          asset_content_type: application/zip

      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/morse-macos.zip
          asset_name: morse-macos.zip
          asset_content_type: application/zip

      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/morse-linux.tar.gz
          asset_name: morse-linux.tar.gz
          asset_content_type: application/gzip
